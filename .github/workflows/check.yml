name: Check

on:
  push:
    branches:
      - comeaucar
  pull_request:
    branches:
      - main

jobs:
  check:
    runs-on: macos-15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: "16.4"
    - name: XcodeGen
      uses: xavierLowmiller/xcodegen-action@1.2.4
      with:
        spec: project.yml
        version: 2.43.0
    - name: Resolve Swift Packages
      run: xcodebuild -resolvePackageDependencies -project bitchat.xcodeproj
    # - name: Run iOS tests
    #   run: |
    #     set -o pipefail && xcodebuild test \
    #       -project bitchat.xcodeproj \
    #       -scheme "bitchat (iOS)" \
    #       -destination "platform=iOS Simulator,name=iPhone 16" | xcpretty
    # ─── Import signing materials ─────────────────────────────────────
    - name: Decode signing assets
      env:
        P12:  ${{ secrets.IOS_CERT_P12_BASE64 }}
        PROF: ${{ secrets.IOS_PROFILE_BASE64 }}
      run: |
        echo "$P12"  | base64 --decode > signing.p12
        echo "$PROF" | base64 --decode > profile.mobileprovision

    # ────────────────────────────────────────────────────────────────────
    # NEW step: prove that the file + password match before importing
    - name: Sanity-check p12 + password
      env:
        IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
      run: |
        printf '%s' "$IOS_CERT_PASSWORD" | od -An -t x1
        echo "hash of p12 on runner:"
        shasum signing.p12
        echo "Trying to open with supplied password …"
        openssl pkcs12 -in signing.p12 -nokeys \
          -passin pass:"$IOS_CERT_PASSWORD" \
          -info -nodes >/dev/null
    # ────────────────────────────────────────────────────────────────────
    # Only if the above succeeds will this import step run
    # ─── Import certificate into an unlocked temp keychain ────────────────
    - name: Import certificate into temp keychain
      env:
        IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
      run: |
        KEYCHAIN="build.keychain"
        KEYCHAIN_PW="tmp123"               # any throw-away password

        # create & unlock
        security create-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"
        security set-keychain-settings -lut 21600 "$KEYCHAIN"   # keep unlocked 6 h
        security unlock-keychain -p "$KEYCHAIN_PW" "$KEYCHAIN"

        # import the p12 (-A = allow all apps, -T codesign needed for Xcode)
        security import signing.p12 \
            -k "$KEYCHAIN" \
            -f pkcs12 \
            -P "$IOS_CERT_PASSWORD" \
            -A -T /usr/bin/codesign

        security find-identity -v -p codesigning build.keychain
        # make the temp keychain the only one Xcode sees
        security list-keychains -d user -s "$KEYCHAIN"

        # partition-list so xcodebuild can sign non-interactively
        security set-key-partition-list \
            -S apple-tool:,apple: \
            -s -k "$KEYCHAIN_PW" "$KEYCHAIN"

        # install the provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

    - name: Decode provisioning profile
      run: |
        security cms -D -i profile.mobileprovision > decoded_profile.plist
    - name: Debug signing assets
      run: |
        echo "Imported Signing Identity:"
        security find-identity -v -p codesigning build.keychain

        echo "Profile Details:"
        /usr/libexec/PlistBuddy -c 'Print :TeamID' decoded_profile.plist || echo "No :TeamID"
        /usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' decoded_profile.plist || echo "No :TeamIdentifier"
        /usr/libexec/PlistBuddy -c 'Print :TeamName' decoded_profile.plist
        /usr/libexec/PlistBuddy -c 'Print :Name' decoded_profile.plist
        /usr/libexec/PlistBuddy -c 'Print :UUID' decoded_profile.plist
        /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' decoded_profile.plist
        /usr/libexec/PlistBuddy -c 'Print :Entitlements:team-identifier' decoded_profile.plist

        echo "Profile Certificate Details:"
        /usr/libexec/PlistBuddy -c 'Print :DeveloperCertificates:0' decoded_profile.plist | base64 --decode > profile_cert.der
        openssl x509 -inform der -in profile_cert.der -noout -subject
        openssl x509 -inform der -in profile_cert.der -noout -fingerprint -sha1 | sed 's/://g'  # Remove colons for easy comparison to your cert hash (454D86EA1AB66766BCC89BD31884DFE06D572FE0)

        echo "Project Build Settings (for bundle ID confirmation):"
        xcodebuild -project bitchat.xcodeproj -scheme "bitchat (iOS)" -showBuildSettings | grep -E 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM'
    # ─── Archive the app ───────────────────────────────────────────────
    - name: Archive
        run: |
          xcodebuild -project bitchat.xcodeproj \
            -scheme "bitchat (iOS)" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -archivePath $PWD/build/bitchat.xcarchive \
            -verbose \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution: Carter Comeau (BQYSQ48JA9)" \  # Use full identity string for precision
            PROVISIONING_PROFILE_SPECIFIER="$(/usr/libexec/PlistBuddy -c 'Print :UUID' decoded_profile.plist)" \
            archive

    # ─── Export signed .ipa ────────────────────────────────────────────
    - name: Export .ipa
        run: |
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>ad-hoc</string>
              <key>signingStyle</key><string>manual</string>
              <key>signingCertificate</key><string>iPhone Distribution: Carter Comeau (BQYSQ48JA9)</string>
              <key>provisioningProfiles</key>
                <dict>
                  <key>com.carter.bitchat</key><string>$(/usr/libexec/PlistBuddy -c 'Print :Name' decoded_profile.plist)</string>
                </dict>
            </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath $PWD/build/bitchat.xcarchive \
            -exportPath $PWD/build/export \
            -exportOptionsPlist ExportOptions.plist

    - uses: actions/upload-artifact@v4
      with:
        name: bitchat-ipa
        path: build/export/*.ipa

